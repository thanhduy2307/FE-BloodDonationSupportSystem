import { useEffect, useState } from "react";
import {
  Table,
  Button,
  Tag,
  Space,
  Modal,
  Form,
  Input,
  DatePicker,
  Popconfirm, // Th√™m d√≤ng n√†y
} from "antd";
import {
  EditOutlined,
  DeleteOutlined,
  PlusOutlined,
} from "@ant-design/icons";
import api from "../../../configs/axios";
import { toast } from "react-toastify";
import dayjs from "dayjs";

const EventTable = ({ onEdit, onDelete }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [eventList, setEventList] = useState([]);

  const handleOpenModal = () => {
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const handleFormSubmit = async (formData) => {
  try {
    const payload = {
      title: formData.title,
      description: formData.description,
      eventDate: formData.eventDate.format("YYYY-MM-DD"),
    };

    console.log("üì¶ Payload g·ª≠i:", payload);

    await api.post("Event/create", payload); 
    toast.success("T·∫°o s·ª± ki·ªán th√†nh c√¥ng!");
    handleCloseModal();
    fetchEvent();
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o s·ª± ki·ªán:", error?.response?.data || error);
    toast.error("ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o m·ªõi.");
  }
};


  const handleEdit = (record) => {
    setSelectedEvent({
      ...record,
      eventDate: record.eventDate ? dayjs(record.eventDate) : null,
    });
    setIsEditModalOpen(true);
  };

  const handleEditSubmit = async (values) => {
    try {
      const payload = {
        ...values,
        eventDate: values.eventDate.format("YYYY-MM-DD"),
      };
      await api.put(`Event/update/${selectedEvent.eventId}`, payload);
      toast.success("C·∫≠p nh·∫≠t s·ª± ki·ªán th√†nh c√¥ng!");
      setIsEditModalOpen(false);
      fetchEvent();
    } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", error);
      toast.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i");
    }
  };

  const handleDelete = async (record) => {
    try {
      console.log("üß® ID c·∫ßn xo√°:", record.eventId);
      await api.delete(`Event/delete/${record.eventId}`);
      console.log("ƒêang x√≥a s·ª± ki·ªán v·ªõi ID:",record.eventId);

      toast.success("X√≥a s·ª± ki·ªán th√†nh c√¥ng!");
      fetchEvent();
    } catch (error) {
      console.error("‚ùå L·ªói x√≥a:", error);
      toast.error("Kh√¥ng th·ªÉ x√≥a s·ª± ki·ªán");
    }
  };

  const fetchEvent = async () => {
    try {
      const response = await api.get("Event/getAll");
      setEventList(response.data);
    } catch (error) {
      console.log(error);
      toast.error("Failed to fetch Event");
    }
  };

  useEffect(() => {
    fetchEvent();
  }, []);

  const columns = [
    {
      title: "ID s·ª± ki·ªán",
      dataIndex: "eventId",
      key: "eventId",
    },
    {
      title: "Ch·ªß ƒë·ªÅ",
      dataIndex: "title",
      key: "title",
    },
    {
      title: "Ng√†y",
      dataIndex: "eventDate",
      key: "eventDate",
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      render: (_, record) => (
        <Space>
          <Button icon={<EditOutlined />} onClick={() => handleEdit(record)} />
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·ª± ki·ªán n√†y?"
            onConfirm={() => handleDelete(record)}
            okText="ƒê·ªìng √Ω"
            cancelText="H·ªßy"
          >
            <Button icon={<DeleteOutlined />} danger />
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">Danh s√°ch s·ª± ki·ªán</h2>
        <Button type="primary" icon={<PlusOutlined />} onClick={handleOpenModal}>
          T·∫°o s·ª± ki·ªán
        </Button>
      </div>

      <Table
        columns={columns}
        dataSource={eventList}
        rowKey={(record) => record.eventId}
        pagination={{ pageSize: 5 }}
      />

      {/* Modal t·∫°o s·ª± ki·ªán */}
      <Modal
        title="T·∫°o s·ª± ki·ªán m·ªõi"
        open={isModalOpen}
        onCancel={handleCloseModal}
        footer={null}
      >
        <Form layout="vertical" onFinish={handleFormSubmit}>
          <Form.Item
            name="title"
            label="Ch·ªß ƒë·ªÅ"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ!" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="description"
            label="M√¥ t·∫£"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£!" }]}
          >
            <Input.TextArea rows={3} />
          </Form.Item>

          <Form.Item
            name="eventDate"
            label="Ng√†y di·ªÖn ra"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ng√†y!" }]}
          >
            <DatePicker className="w-full" />
          </Form.Item>

          <div className="flex justify-end mt-4">
            <Button onClick={handleCloseModal} className="mr-2">
              H·ªßy
            </Button>
            <Button type="primary" htmlType="submit">
              T·∫°o
            </Button>
          </div>
        </Form>
      </Modal>

      {/* Modal ch·ªânh s·ª≠a s·ª± ki·ªán */}
      <Modal
        title="Ch·ªânh s·ª≠a s·ª± ki·ªán"
        open={isEditModalOpen}
        onCancel={() => setIsEditModalOpen(false)}
        footer={null}
      >
        <Form
          layout="vertical"
          initialValues={selectedEvent}
          onFinish={handleEditSubmit}
          key={selectedEvent?.eventId}
        >
          <Form.Item
            name="title"
            label="Ch·ªß ƒë·ªÅ"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ!" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="description"
            label="M√¥ t·∫£"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m√¥ t·∫£!" }]}
          >
            <Input.TextArea rows={3} />
          </Form.Item>

          <Form.Item
            name="eventDate"
            label="Ng√†y di·ªÖn ra"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ng√†y!" }]}
          >
            <DatePicker className="w-full" />
          </Form.Item>

          <div className="flex justify-end mt-4">
            <Button onClick={() => setIsEditModalOpen(false)} className="mr-2">
              H·ªßy
            </Button>
            <Button type="primary" htmlType="submit">
              C·∫≠p nh·∫≠t
            </Button>
          </div>
        </Form>
      </Modal>
    </div>
  );
};

export default EventTable;
